1、登录
    授权模块中的ItripUser的service及其实现类创建getItripUserByUserCode和login两个方法
            前者：通过userCode查询用户
            后者：通过前者查询到的用户，依次判断该用户是否存在、用户是否被激活、密码是否正确，如果条件全部成立这返回用户对象，
反之依次抛出异常(该异常为我们自定义的异常在工具类中)异常中包含相应的错误码!
2、如果验证成功返回相应的对象并将其保存到token中：
       ①、创建token服务接口TokenService及实现类TokenServiceImpl，定义创建、验证、删除、替换、保存等方法
           1.1、创建token通过传入的用户对象及客户端标识来进行拼接，拼接形式为：token：客户端标识-用户账号-用户id-创建时间-客户端加
           密码（不可大于32位，一般为6位），拼接完成后返回token对象
           1.2、saveToken方法进行保存token，一般步骤为：
                1.2.1、通过CheckAgent(userAgent)[该方法在UserAgentUtil工具类中]方法判断当前的用户标识是否是pc还是mobile端，pc端设置时效，mobile不需设置
           1.3、验证validateToken方法一般与saveToken保存方法一起用于token的置换中
                validateToken实现步骤：
                    1.3.1：首先判断redis中是否有该token   -->  redisUtil.exsits(token)
                    1.3.2: 如果token有效这取出token中的加密的userAgent(客户端标识),与传入的客户端标识（加密的）进行比较
                    DigestUtil.hmacSign(userAgent, 6).equals(tokenUserAgent)，如果两者一致这表示成功，当前token有效，反之无效
                    *注意这里的validateToken方法返回的是boolean类型
           1.4、token的置换：
                 当token的保护期过后，我们可以为token进行置换操作
                 实现步骤：
                    1.4.1：进行token的验证这时就用到了1.3中的validateToken方法了如果返回的是true证明token有效反之抛出异常
                    throw new ItripExcepion("未知token或token已过期", ErrorCode.AUTH_REPLACEMENT_FAILED);，
                    （返回true时）这时进行判断
                        token是否还在保护期间内，首先获取当前时间
                            long currTime = new Date().getTime();
                        然后通过当前token获取期创建时间：
                             long genTime = new SimpleDateFormat("yyyyMMddHHmmss")
                                                .parse(token.split("-")[3]).getTime();
                        用当前时间-创建时间如果值大于token的保护时间则可以进行置换，否则抛出异常
                        throw new ItripExcepion("token正处于保护期内，禁止替换", ErrorCode.AUTH_REPLACEMENT_FAILED);
                    1.4.2：置换步骤：
                        如果可以进行置换操作这时我们首先要判断token的剩余时间
                            Long ttl = redisUtil.ttl(token);
                        而后判断token是否消亡
                            ttl > 0 || ttl == -1
                        如果token任然存活，这时可以通过获取当前token，并通过validationUtil工具类将token转化为用户对象
                            ItripUser itripUser = validationUtil.getUser(token);
                        然后进行替换，并创建新的token对象
                            String newToken = generateToken(userAgent, itripUser);
                        延迟老token的消亡时间
                            redisUtil.set(token, JSON.toJSONString(itripUser), 60*3);
                        将新的token保存到redis中并返回新的token
                             saveToken(newToken, itripUser);
                             return newToken；
                        如果ttl > 0 || ttl == -1不成立则抛出异常
                            throw new ItripExcepion("token正处于保护期内，禁止替换", ErrorCode.AUTH_REPLACEMENT_FAILED);

             5、删除token:用于注销时使用
                    实现步骤：
                        判断redis中是否存在当前token然后调用redisUtil中的删除方法即可
                        redisUtil.del(token);


 其中有些我们要自定义的工具类要注意
        validationUtil用于获取token中的用户信息并将其转换为用户对象
        ItripExcepion用户返回错误码